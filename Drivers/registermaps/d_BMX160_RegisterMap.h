#ifndef d_BMX160_REGISTER_MAP_H_
#define d_BMX160_REGISTER_MAP_H_

enum BMX160_register {
	BMX160_CHIPID  =         0x00,
	BMX160_ERR_REG =         0x02,
	BMX160_PMU_STATUS =      0x03,
	BMX160_DATA0 =           0x04,
	BMX160_DATA1 =           0x05,
	BMX160_DATA2 =           0x06,
	BMX160_DATA3 =           0x07,
	BMX160_DATA4 =           0x08,
	BMX160_DATA5 =           0x09,
	BMX160_DATA6 =           0x0A,
	BMX160_DATA7 =           0x0B,
	BMX160_DATA8 =           0x0C,
	BMX160_DATA9 =           0x0D,
	BMX160_DATA10 =          0x0E,
	BMX160_DATA11 =          0x0F,
	BMX160_DATA12 =          0x10,
	BMX160_DATA13 =          0x11,
	BMX160_DATA14 =          0x12,
	BMX160_DATA15 =          0x13,
	BMX160_DATA16 =          0x14,
	BMX160_DATA17 =          0x15,
	BMX160_DATA18 =          0x16,
	BMX160_DATA19 =          0x17,
	BMX160_SENSORTIME0 =     0x18,
	BMX160_SENSORTIME1 =     0x19,
	BMX160_SENSORTIME2 =     0x1A,
	BMX160_STATUS =          0x1B,
	BMX160_INT_STATUS0 =     0x1C,
	BMX160_INT_STATUS1 =     0x1D,
	BMX160_INT_STATUS2 =     0x1E,
	BMX160_INT_STATUS3 =     0x1F,
	BMX160_TEMPERATURE0 =    0x20,
	BMX160_TEMPERATURE1 =    0x21,
	BMX160_FIFO_LENGTH0 =    0X22,
	BMX160_FIFO_LENGTH1 =    0x23,
	BMX160_FIFO_DATA   =     0x24,
	BMX160_ACC_CONF =        0x40,
	BMX160_ACC_RANGE =       0x41,
	BMX160_GYR_CONF =        0x42,
	BMX160_GYR_RANGE =       0x43,
	BMX160_MAG_CONF =        0x44,
	BMX160_FIFO_DOWNS =      0x45,
	BMX160_FIFO_CONFIG0 =    0x46,
	BMX160_FIFO_CONFIG1 =    0x47,
	BMX160_MAG_IF0    =      0x4C,
	BMX160_MAG_IF1 =         0x4D,
	BMX160_MAG_IF2 =         0x4E,
	BMX160_MAG_IF3 =         0x4F,
	BMX160_INT_EN0 =         0x50,
	BMX160_INT_EN1 =         0x51,
	BMX160_INT_EN2 =         0x52,
	BMX160_INT_OUT_CTRL =    0x53,
	BMX160_INT_LATCH =       0x54,
	BMX160_INT_MAP0 =        0x55,
	BMX160_INT_MAP1 =        0x56,
	BMX160_INT_MAP2 =        0x57,
	BMX160_INT_DATA0 =       0x58,
	BMX160_INT_DATA1 =       0x59,
	BMX160_INT_LOWHIGH0 =    0x5A,
	BMX160_INT_LOWHIGH1 =    0x5B,
	BMX160_INT_LOWHIGH2 =    0x5C,
	BMX160_INT_LOWHIGH3 =    0x5D,
	BMX160_INT_LOWHIGH4 =    0x5E,
	BMX160_INT_MOTION0 =     0x5F,
	BMX160_INT_MOTION1 =     0x60,
	BMX160_INT_MOTION2 =     0x61,
	BMX160_INT_MOTION3 =     0x62,
	BMX160_INT_TAP0 =        0x63,
	BMX160_INT_TAP1 =        0x64,
	BMX160_INT_ORIENT0 =     0x65,
	BMX160_INT_ORIENT1 =     0x66,
	BMX160_INT_FLAT0 =       0x67,
	BMX160_INT_FLAT1 =       0x68,
	BMX160_FOC_CONF =        0x69,
	BMX160_CONF =            0x6A,
	BMX160_IF_CONF =         0x6B,
	BMX160_PMU_TRIGGER =     0x6C,
	BMX160_SELF_TEST =       0x6D,
	BMX160_NV_CONF =         0x70,
	BMX160_OFFSET0 =         0x71,
	BMX160_OFFSET1 =         0x72,
	BMX160_OFFSET2 =         0x73,
	BMX160_OFFSET3 =         0x74,
	BMX160_OFFSET4 =         0x75,
	BMX160_OFFSET5 =         0x76,
	BMX160_OFFSET6 =         0x77,
	BMX160_STEP_CNT0 =       0x78,
	BMX160_STEP_CNT1 =       0x79,
	BMX160_STEP_CONF0 =      0x7A,
	BMX160_STEP_CONF1 =      0x7B,
	BMX160_CMD =             0x7E,
};


enum err_reg_bits {
	ERR_REG_FATAL_ERR    = 0,
	ERR_REG_ERROR_CODE 	 = 1,
	ERR_REG_DROP_CMD_ERR = 6,
};

enum pmu_status_bits {
	PMU_STATUS_MAG_IF_PMU_STATUS = 0,
	PMU_STATUS_GYR_PMU_STATUS 	 = 2,
	PMU_STATUS_ACC_PMU_STATUS 	 = 4,
};

enum sensortime_bits {
	////////SENSORTIME0////////
	SENSORTIME0_SENSOR_TIME0 = 0,
	SENSORTIME0_SENSOR_TIME1 = 4,
	////////SENSORTIME1////////
	SENSORTIME1_SENSOR_TIME0 = 0,
	SENSORTIME1_SENSOR_TIME1 = 4,
	////////SENSORTIME2///////
	SENSORTIME2_SENSOR_TIME0 = 0,
	SENSORTIME2_SENSOR_TIME1 = 1,
};

enum status_bits {
	STATUS_GYR_SELF_TEST_OK = 1,
	STATUS_MAG_MAN_OP		= 2,
	STATUS_FOC_RDY			= 3,
	STATUS_NVM_RDY			= 4,
	STATUS_DRDY_MAG			= 5,
	STATUS_DRDY_GYR			= 6,
	STATUS_DRDY_ACC			= 7,
};

enum interrupt_status_bits {
	////////STATUS0////////
	INT_STATUS0_STEP_INT 		= 0,
	INT_STATUS0_SIGMOT_INT		= 1,
	INT_STATUS0_ANYM_INT 		= 2,
	INT_STATUS0_PMU_TRIGGER_INT = 3,
	INT_STATUS0_D_TAP_INT 		= 4,
	INT_STATUS0_S_TAP_INT 		= 5,
	INT_STATUS0_ORIENT_INT 		= 6,
	INT_STATUS0_FLAT_INT 		= 7,
	////////STATUS1////////
	INT_STATUS1_HIGHG_Z_INT 	= 2,
	INT_STATUS1_LOWG_INT		= 3,
	INT_STATUS1_DRDY_INT		= 4,
	INT_STATUS1_FFULL_INT 		= 5,
	INT_STATUS1_FWM_INT			= 6,
	INT_STATUS1_NOMO_INT		= 7,
	////////STATUS2////////
	INT_STATUS2_ANYM_FIRST_X 	= 0,
	INT_STATUS2_ANYM_FIRST_Y 	= 1,
	INT_STATUS2_ANYM_FIRST_Z 	= 2,
	INT_STATUS2_ANYM_SIGN	 	= 3,
	INT_STATUS2_TAP_FIRST_X  	= 4,
	INT_STATUS2_TAP_FIRST_Y  	= 5,
	INT_STATUS2_TAP_FIRST_Z  	= 6,
	INT_STATUS2_TAP_SIGN	 	= 7,
	////////STATUS3////////
	INT_STATUS3_HIGH_FIRST_X 	= 0,
	INT_STATUS3_HIGH_FIRST_Y 	= 1,
	INT_STATUS3_HIGH_FIRST_Z 	= 2,
	INT_STATUS3_HIGH_SIGN	 	= 3,
	INT_STATUS3_ORIENTXY		= 4,
	INT_STATUS3_ORIENTZ		 	= 6,
	INT_STATUS3_FLAT		 	= 7,
};

enum fifo_length_bits {
	////////FIFO LENGTH 0////////
	FIFO_LENGTH0_FIFO_BYTE_COUNTER0 = 0,
	FIFO_LENGTH0_FIFO_BYTE_COUNTER1 = 4,
	////////FIFO LENGTH 1////////
	FIFO_LENGTH_FIFO_BYTE_COUNTER0	= 0,
};

enum fifo_data_bits {
	FIFO_DATA_FIFO_DATA0 = 0,
	FIFO_DATA_FIFO_DATA1 = 4,
};

enum acc_conf_bits {
	ACC_CONF_ACC_ODR = 0,
	ACC_CONF_ACC_BWP = 4,
	ACC_CONF_ACC_US  = 7,
};
#define BMX160_ACC_ODR_MASK 0x0F
#define BMX160_ACC_BWP_MASK 0x07

enum acc_range_bits {
	ACC_RANGE_ACC_RANGE0 = 0,
};
#define BMX160_ACC_RANGE_MASK 0x0F

enum gyr_conf_bits {
GYR_CONF_GYR_ODR = 0,
GYR_CONF_GYR_BWP = 4,
};
#define BMX160_GYR_ODR_MASK 0x0F
#define BMX160_GYR_BWP_MASK 0x03

enum gyr_range_bits {
	GYR_RANGE_GYR_RANGE0 = 0,
};
#define BMX160_GYR_RANGE_MASK 0x07

enum mag_conf_bits {
	MAG_CONF_MAG_ODR = 0,
};
#define BMX160_MAG_ODR_MASK 0x0F

enum fifo_downs_bits {
	FIFO_DOWNS_GYR_FIFO_DOWNS 	  = 0,
	FIFO_DOWNS_GYR_FIFO_FILT_DATA = 3,
	FIFO_DOWNS_ACC_FIFO_DOWNS	  = 4,
	FIFO_DOWNS_ACC_FIFO_FILT_DATA = 7,
};
#define BMX160_GYR_FIFO_DOWNS_MASK 0x07
#define BMX160_ACC_FIFO_DOWNS_MASK 0x07

enum fifo_conf_bits {
	////////FIFO CONFIG 0////////
	FIFO_CONF0_FIFO_WATER_MARK = 0,
	////////FIFO CONFIG 1////////
	FIFO_CONF1_FIFO_TIME_EN 	= 1,
	FIFO_CONF1_FIFO_TAG_INT2_EN	= 2,
	FIFO_CONF1_FIFO_TAG_INT1_EN = 3,
	FIFO_CONF1_FIFO_HEADER_EN	= 4,
	FIFO_CONF1_FIFO_MAG_EN		= 5,
	FIFO_CONF1_FIFO_ACC_EN		= 6,
	FIFO_CONF1_FIFO_GUR_EN		= 7,
};

enum mag_if_bits {
	MAG_IF_MAG_RD_BURST  = 0,
	MAG_IF_MAG_OFFSET	 = 2,
	MAG_IF_MAG_MANUAL_EN = 7,
};
#define BMX160_MAG_RD_BURST_MASK 0x03
#define bmz160_MAG_OFFSET_MASK   0x0F

enum int_en_bits {
	////////INT EN 0////////
	INT_EN0_INT_ANYMO_X_EN  = 0,
	INT_EN0_INT_ANYMO_Y_EN  = 1,
	INT_EN0_INT_ANYMO_Z_EN  = 2,
	INT_EN0_INT_D_TAP_EN    = 4,
	INT_EN0_INT_S_TAP_EN    = 5,
	INT_EN0_INT_ORIENT_EN   = 6,
	INT_EN0_INT_FLAT_EN	    = 7,
	////////INT EN 1////////
	INT_EN1_INT_HIGHX_EN    = 0,
	INT_EN1_INT_HIGHY_EN    = 1,
	INT_EN1_INT_HIGHZ_EN    = 2,
	INT_EN1_INT_LOW_EN	    = 3,
	INT_EN1_INT_DRDY_EN	    = 4,
	INT_EN1_INT_FFULL_EN    = 5,
	INT_EN1_INT_FWM_EN      = 6,
	////////INT EN 2////////
	INT_EN2_INT_NOMOX_EN	= 0,
	INT_EN2_INT_NOMOY_EN	= 1,
	INT_EN2_INT_NOMOZ_EN    = 2,
	INT_EN2_INT_STEP_DET_EN = 3,
};

enum int_out_ctrl_bits {
	INT_OUT_CTRL_INT1_EDGE_CTRL = 0,
	INT_OUT_CTRL_INT1_LVL		= 1,
	INT_OUT_CTRL_INT1_OD		= 2,
	INT_OUT_CTRL_INT1_OUTPUT_EN = 3,
	INT_OUT_CTRL_INT2_EDGE_CTRL = 4,
	INT_OUT_CTRL_INT2_LVL		= 5,
	INT_OUT_CTRL_INT2_OD		= 6,
	INT_OUT_CTRL_INT2_OUTPUT_EN = 7,
};

enum int_latch_bits {
	INT_LATCH_INT_LATCHED 	= 0,
	INT_LATCH_INT1_INPUT_EN = 4,
	INT_LATCH_INT2_INPUT_EN = 5,
};
#define BMX160_INT_LATCHED_MASK 0x0F

enum int_map_bits {
	////////INT MAP 0////////
	INT_MAP0_INT1_LOWG     		 = 0,
	INT_MAP0_INT1_HIGHG    		 = 1,
	INT_MAP0_INT1_ANYM 	   		 = 2,
	INT_MAP0_INT1_NOMO     		 = 3,
	INT_MAP0_INT1_DBL_TAP  		 = 4,
	INT_MAP0_INT1_SNGL_TAP 		 = 5,
	INT_MAP0_INT1_ORIENT   		 = 6,
	INT_MAP0_INT1_FLAT	   		 = 7,
	////////INT MAP 1////////
	INT_MAP1_INT2_PMU_TRIGGER    = 0,
	INT_MAP1_INT2_FIFO_FULL		 = 1,
	INT_MAP1_INT2_FIFOWATERMARK  = 2,
	INT_MAP1_INT2_DATA_RDY		 = 3,
	INT_MAP1_INT1_PMU_TRIGGER 	 = 4,
	INT_MAP1_INT1_FIFO_FULL   	 = 5,
	INT_MAP1_INT1_FIFO_WATERMARK = 6,
	INT_MAP1_INT1_DATA_RDY		 = 7,
	////////INT MAP 2////////
	INT_MAP2_INT2_LOWG     		 = 0,
	INT_MAP2_INT2_HIGHG    		 = 1,
	INT_MAP2_INT2_ANYM 	   		 = 2,
	INT_MAP2_INT2_NOMO     		 = 3,
	INT_MAP2_INT2_DBL_TAP  		 = 4,
	INT_MAP2_INT2_SNGL_TAP 		 = 5,
	INT_MAP2_INT2_ORIENT   		 = 6,
	INT_MAP2_INT2_FLAT	   		 = 7,
};

enum int_data_bits {
	////////INT DATA 0////////
	INT_DATA0_INT_TAP_SRC     = 3,
	INT_DATA0_INT_LOWHIGH_SRC = 7,
	////////INT DATA 1////////
	INT_DATA1_INT_MOTION_SRC  = 7,
};

enum int_lowhigh_bits {
	////////INT LOWHIGH 0////////
	INT_LOWHIGH0_INT_LOW_DUR0  = 0,
	INT_LOWHIGH0_INT_LOW_DUR1  = 4,
	////////INT LOWHIGH 1////////
	INT_LOWHIGH1_INT_LOW_TH0   = 0,
	INT_LOWHIGH1_INT_LOW_TH1   = 4,
	////////INT LOWHIGH 2////////
	INT_LOWHIGH2_INT_LOW_HY    = 0,
	INT_LOWHIGH2_INT_LOW_MODE  = 2,
	INT_LOWHIGH2_INT_HIGH_HY   = 6,
	////////INT LOWHIGH 3////////
	INT_LOWHIGH3_INT_HIGH_DUR0 = 0,
	INT_LOWHIGH3_INT_HIGH_DUR1 = 1,
	////////INT LOWHIGH 4////////
	INT_LOWHIGH4_HIGH_TH0	   = 0,
	INT_LOWHIGH4_HIGH_TH1      = 4,
};
#define BMX160_INT_LOW_HY_MASK  0x03
#define BMX160_INT_HIGH_HY_MASK 0x03

enum int_motion_bits {
	////////INT MOTION 0////////
	INT_MOTION0_INT_ANYM_DUR 	    = 0,
	INT_MOTION0_INT_SLO_NO_MOT_DUR  = 1,
	////////INT MOTION 1////////
	INT_MOTION1_INT_ANYM_TH0		= 0,
	INT_MOTION1_INT_ANYM_TH1		= 4,
	////////INT MOTION 2////////
	INT_MOTION2_INT_SLO_NO_MOT0	    = 0,
	INT_MOTION2_INT_SLO_NO_MOT1		= 4,
	////////INT MOTION 3////////
	INT_MOTION3_INT_NO_MOT_SEL		= 0,
	INT_MOTION3_INT_SIG_MOT_SEL		= 1,
	INT_MOTION3_INT_SIG_MOT_SKIP	= 2,
	INT_MOTION3_INT_SIG_MOT_PROOF	= 4,
};
#define BMX160_INT_ANYM_DUR_MASK	 	0x03
#define BMX160_INT_SLO_NO_MOT_DUR_MASK 	0x3F
#define BMX160_INT_SIG_MOT_SKIP_MASK	0x03
#define BMX160_INT_SIG_MOT_PROOF_MASK	0x03

enum int_tap_bits {
	////////INT TAP 0////////
	INT_TAP0_INT_TAP_DUR   = 0,
	INT_TAP0_INT_TAP_SHOCK = 6,
	INT_TAP0_INT_TAP_QUIET = 7,
	////////INT TAP 1////////
	INT_TAP1_INT_TAP_TH0   = 0
};
#define BMX160_INT_TAP_DUR_MASK 0x07
#define BMX160_INT_TAP_TH_MASK	0x1F


enum int_orient_bits {
	////////INT ORIENT 0////////
	INT_ORIENT0_INT_ORIENT_MODE 	= 0,
	INT_ORIENT0_INT_ORIENT_BLOCKING = 2,
	INT_ORIENT0_INT_ORIENT_HYST     = 4,
	////////INT ORIENT 1////////
	INT_ORIENT1_INT_ORIENT_THETA	= 0,
	INT_ORIENT1_INT_ORIENT_UD_EN	= 6,
	INT_ORIENT1_INT_AXES_EX			= 7,
};
#define BMX160_INT_ORIENT_MODE_MASK		0x03
#define BMX160_INT_ORIENT_BLOCKING_MASK	0x03
#define BMX160_INT_ORIENT_HYST_MASK		0x0f
#define BMX160_INT_ORIENT_THETA_MASK	0x3F


enum int_flat_bits {
	////////INT FLAT 0////////
	INT_FLAT0_INT_FLAT_THETA 	 = 0,
	////////INT FLAT 1////////
	INT_FLAT1_INT_FLAT_HY	   	 = 0,
	INT_FLAT1_INT_FLAT_HOLD_TIME = 4,
};
#define BMX160_INT_FLAT_THETA_MASK		0x3F
#define BMX160_INT_FLAT_HY_MASK			0x0F
#define BMX160_INT_FLAT_HOLD_TIME_MASK	0x03

enum foc_conf_bits {
	FOC_CONF_FOC_ACC_Z  = 0,
	FOC_CONF_FOC_ACC_Y  = 2,
	FOC_CONF_FOC_ACC_X  = 4,
	FOC_CONF_FOC_GYR_EN = 6,
};
#define BMX160_FOC_ACC_Z_MASK 0x03
#define BMX160_FOC_ACC_Y_MASK 0x03
#define BMX160_FOC_ACC_X_MASK 0x03

enum conf_bits {
	CONF_NVM_PROG_EN = 1,
};

enum if_conf_bits {
	IF_CONF_SPI3 = 0,
};

enum pmu_trigger_bits{
	PMU_TRIGGER_GYR_SLEEP_TRIGGER 	= 0,
	PMU_TRIGGER_GYR_WAKEUP_TRIGGER  = 3,
	PMU_TRIGGER_GYR_SLEEP_STATE 	= 5,
	PMU_TRIGGER_WAKEUP_INT			= 6,
};
#define BMX160_GYR_SLEEP_TRIGGER_MASK  0x07
#define BMX160_GYR_WAKEUP_TRIGGER_MASK 0x03

enum self_test_bits {
	SELF_TEST_ACC_SELF_TEST_ENABLE  = 0,
	SELF_TEST_ACC_SELF_TEST_SIGN	= 2,
	SELF_TEST_ACC_SELF_TEST_AMP		= 3,
	SELF_TEST_GYR_SELF_TEST_ENABLE	= 4,
};

enum nv_conf_bits {
	NV_CONF_SPI_EN       = 0,
	NV_CONF_I2C_WDT_SEL0 = 1,
	NV_CONF_I2C_WDT_SEL1 = 2,
};

enum offset_bits {
	////////OFFSET 6////////
	OFFSET6_OFF_GYR_X 	= 0,
	OFFSET6_OFF_GYR_Y	= 2,
	OFFSET6_OFF_GYR_Z	= 4,
	OFFSET6_ACC_OFF_EN  = 6,
	OFFSET6_GYR_OFF_EN	= 7,
};
#define BMX160_OFF_GYR_X_MASK 0x03
#define BMX160_OFF_GYR_Y_MASK 0x03
#define BMX160_OFF_GYR_Z_MASK 0x03

enum step_cnt_bits {
	////////STEP CNT 0////////
	STEP_CNT0_STEP_CNT	= 0,
	////////STEP CNT 1////////
	STEP_CNT1_STEP_CNT	= 0,
};

enum step_conf_bits {
	////////STEP CONF 0////////
	STEP_CONF0_STEP_CONF	= 0,
	////////STEP CONF 1////////
	STEP_CONF1_STEP_CONF_10_8	= 0,
	STEP_CONF1_STEP_CNT_EN	= 3,
};
#define BMX160_STEP_CONF_10_8_MASK 0x07

enum cmd_bits {
	CMD_CMD0 = 0,
};

#endif